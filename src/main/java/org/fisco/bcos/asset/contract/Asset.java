package org.fisco.bcos.asset.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Bool;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int16;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Int256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Asset extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b50611002600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060600167ffffffffffffffff811180156200007057600080fd5b50604051908082528060200260200182016040528015620000a657816020015b6060815260200190600190039081620000905790505b5090506040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081600081518110620000ed57fe5b6020026020010181905250620001026200036c565b60405180604001604052806040518060400160405280600781526020017f6163636f756e74000000000000000000000000000000000000000000000000008152508152602001838152509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166331a5a51e6040518060400160405280600781526020017f745f617373657400000000000000000000000000000000000000000000000000815250836040518363ffffffff1660e01b8152600401620001e292919062000591565b602060405180830381600087803b158015620001fd57600080fd5b505af115801562000212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002389190620003e0565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f23f63c96040518060400160405280600781526020017f745f6173736574000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401620002cd91906200056d565b60206040518083038186803b158015620002e657600080fd5b505afa158015620002fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003219190620003b4565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620006ee565b604051806040016040528060608152602001606081525090565b6000815190506200039781620006ba565b92915050565b600081519050620003ae81620006d4565b92915050565b600060208284031215620003c757600080fd5b6000620003d78482850162000386565b91505092915050565b600060208284031215620003f357600080fd5b600062000403848285016200039d565b91505092915050565b60006200041a8383620004a3565b905092915050565b60006200042f82620005dc565b6200043b8185620005ff565b9350836020820285016200044f85620005cc565b8060005b858110156200049157848403895281516200046f85826200040c565b94506200047c83620005f2565b925060208a0199505060018101905062000453565b50829750879550505050505092915050565b6000620004b082620005e7565b620004bc818562000610565b9350620004ce81856020860162000673565b620004d981620006a9565b840191505092915050565b6000620004f182620005e7565b620004fd818562000621565b93506200050f81856020860162000673565b6200051a81620006a9565b840191505092915050565b60006040830160008301518482036000860152620005448282620004a3565b9150506020830151848203602086015262000560828262000422565b9150508091505092915050565b60006020820190508181036000830152620005898184620004e4565b905092915050565b60006040820190508181036000830152620005ad8185620004e4565b90508181036020830152620005c3818462000525565b90509392505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200063f8262000653565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200069357808201518184015260208101905062000676565b83811115620006a3576000848401525b50505050565b6000601f19601f8301169050919050565b620006c58162000632565b8114620006d157600080fd5b50565b620006df8162000646565b8114620006eb57600080fd5b50565b6113fe80620006fe6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80639b80b05014610046578063ea87152b14610076578063fcd7e3c1146100a6575b600080fd5b610060600480360381019061005b9190610dba565b6100d7565b60405161006d9190611099565b60405180910390f35b610090600480360381019061008b9190610e39565b6106a2565b60405161009d91906110b4565b60405180910390f35b6100c060048036038101906100bb9190610d79565b61084e565b6040516100ce929190611070565b60405180910390f35b60008060019050600080905060008090506100f18761084e565b809350819450505060011515831515146101b45784866040516101149190611059565b60405180910390208860405161012a9190611059565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60405161018191906110ea565b60405180910390a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff935050505061069b565b6101bd8661084e565b809250819450505060011515831515146102805784866040516101e09190611059565b6040518091039020886040516101f69190611059565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60405161024d9190611105565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe935050505061069b565b848210156103375784866040516102979190611059565b6040518091039020886040516102ad9190611059565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6040516103049190611120565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd935050505061069b565b8085820110156103f05784866040516103509190611059565b6040518091039020886040516103669190611059565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc6040516103bd919061113b565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc935050505061069b565b60606103fd86840361092a565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e942b5168a846040518363ffffffff1660e01b815260040161045d929190611193565b602060405180830381600087803b15801561047757600080fd5b505af115801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610d50565b905060018160030b1461056d5786886040516104cb9190611059565b60405180910390208a6040516104e19190611059565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb6040516105389190611156565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb9550505050505061069b565b606061057a88850161092a565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e942b5168a836040518363ffffffff1660e01b81526004016105d8929190611193565b602060405180830381600087803b1580156105f257600080fd5b505af1158015610606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062a9190610d50565b50878960405161063a9190611059565b60405180910390208b6040516106509190611059565b60405180910390207f8f6b9fa4d4bf04c7c1c3242d4a5c59ba22525b6761cf89e44becb27c606154bd600060405161068891906110cf565b60405180910390a4600096505050505050505b9392505050565b6000806000905060006001905060008090506106bd8661084e565b809250819350505060011515821515146107d05760606106dc8661092a565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e942b51689846040518363ffffffff1660e01b815260040161073c929190611193565b602060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078e9190610d50565b905060018160030b14156107a557600094506107c9565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94505b50506107f4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92505b84866040516108039190611059565b60405180910390207f91c95f04198617c60eaf2180fbca88fc192db379657df0e412a9f7dd4ebbe95d8560405161083a91906110b4565b60405180910390a382935050505092915050565b600080600060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663693ec85e866040518263ffffffff1660e01b81526004016108af9190611171565b60006040518083038186803b1580156108c757600080fd5b505afa1580156108db573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109049190610c","fc565b8092508193505050600080905061091a82610a6e565b9050828194509450505050915091565b60606000821415610972576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610a69565b600082905060005b6000821461099c578080600101915050600a828161099457fe5b04915061097a565b60608167ffffffffffffffff811180156109b557600080fd5b506040519080825280601f01601f1916602001820160405280156109e85781602001600182028036833780820191505090505b50905060006001830390505b60008614610a6157600a8681610a0657fe5b0660300160f81b82828060019003935081518110610a2057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681610a5957fe5b0495506109f4565b819450505050505b919050565b6000610a7b826000610a82565b9050919050565b600060608390506000809050600080905060008090505b8351811015610bf6576030848281518110610ab057fe5b602001015160f81c60f81b60f81c60ff1610158015610aec57506039848281518110610ad857fe5b602001015160f81c60f81b60f81c60ff1611155b15610b3e578115610b0f576000861415610b0557610bf6565b8580600190039650505b600a830292506030848281518110610b2357fe5b602001015160f81c60f81b60f81c60ff160383019250610be9565b602e848281518110610b4c57fe5b602001015160f81c60f81b60f81c60ff161415610bad578115610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b906111ea565b60405180910390fd5b60019150610be8565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdf906111ca565b60405180910390fd5b5b8080600101915050610a99565b506000851115610c095784600a0a820291505b81935050505092915050565b600081519050610c2481611383565b92915050565b600081519050610c398161139a565b92915050565b600082601f830112610c5057600080fd5b8135610c63610c5e82611237565b61120a565b91508082526020830160208301858383011115610c7f57600080fd5b610c8a838284611330565b50505092915050565b600082601f830112610ca457600080fd5b8151610cb7610cb282611237565b61120a565b91508082526020830160208301858383011115610cd357600080fd5b610cde83828461133f565b50505092915050565b600081359050610cf6816113b1565b92915050565b60008060408385031215610d0f57600080fd5b6000610d1d85828601610c15565b925050602083015167ffffffffffffffff811115610d3a57600080fd5b610d4685828601610c93565b9150509250929050565b600060208284031215610d6257600080fd5b6000610d7084828501610c2a565b91505092915050565b600060208284031215610d8b57600080fd5b600082013567ffffffffffffffff811115610da557600080fd5b610db184828501610c3f565b91505092915050565b600080600060608486031215610dcf57600080fd5b600084013567ffffffffffffffff811115610de957600080fd5b610df586828701610c3f565b935050602084013567ffffffffffffffff811115610e1257600080fd5b610e1e86828701610c3f565b9250506040610e2f86828701610ce7565b9150509250925092565b60008060408385031215610e4c57600080fd5b600083013567ffffffffffffffff811115610e6657600080fd5b610e7285828601610c3f565b9250506020610e8385828601610ce7565b9150509250929050565b610e968161128a565b82525050565b610ea581611296565b82525050565b610eb4816112a3565b82525050565b610ec3816112c4565b82525050565b610ed2816112d6565b82525050565b610ee1816112e8565b82525050565b610ef0816112fa565b82525050565b610eff8161130c565b82525050565b610f0e8161131e565b82525050565b6000610f1f82611263565b610f29818561126e565b9350610f3981856020860161133f565b610f4281611372565b840191505092915050565b6000610f5882611263565b610f62818561127f565b9350610f7281856020860161133f565b80840191505092915050565b6000610f8b602c8361126e565b91507f4e6f6e2d6e756d6572616c2063686172616374657220656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b6000610ff1602c8361126e565b91507f4d6f7265207468616e206f6e6520646563696d616c20656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b611053816112ba565b82525050565b60006110658284610f4d565b915081905092915050565b60006040820190506110856000830185610e8d565b611092602083018461104a565b9392505050565b60006020820190506110ae6000830184610e9c565b92915050565b60006020820190506110c96000830184610eab565b92915050565b60006020820190506110e46000830184610eba565b92915050565b60006020820190506110ff6000830184610ec9565b92915050565b600060208201905061111a6000830184610ed8565b92915050565b60006020820190506111356000830184610ee7565b92915050565b60006020820190506111506000830184610ef6565b92915050565b600060208201905061116b6000830184610f05565b92915050565b6000602082019050818103600083015261118b8184610f14565b905092915050565b600060408201905081810360008301526111ad8185610f14565b905081810360208301526111c18184610f14565b90509392505050565b600060208201905081810360008301526111e381610f7e565b9050919050565b6000602082019050818103600083015261120381610fe4565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561122d57600080fd5b8060405250919050565b600067ffffffffffffffff82111561124e57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b60008160010b9050919050565b6000819050919050565b60008160030b9050919050565b6000819050919050565b60006112cf826112a3565b9050919050565b60006112e1826112a3565b9050919050565b60006112f3826112a3565b9050919050565b6000611305826112a3565b9050919050565b6000611317826112a3565b9050919050565b6000611329826112a3565b9050919050565b82818337600083830152505050565b60005b8381101561135d578082015181840152602081019050611342565b8381111561136c576000848401525b50505050565b6000601f19601f8301169050919050565b61138c8161128a565b811461139757600080fd5b50565b6113a3816112ad565b81146113ae57600080fd5b50565b6113ba816112ba565b81146113c557600080fd5b5056fea26469706673582212205670580f616ebf7bd4cddcc946e0d9389d75d41df3778afb0cb5c1b13a4853f464736f6c634300060a0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b50611002600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060600167ffffffffffffffff811180156200007057600080fd5b50604051908082528060200260200182016040528015620000a657816020015b6060815260200190600190039081620000905790505b5090506040518060400160405280600b81526020017f61737365745f76616c756500000000000000000000000000000000000000000081525081600081518110620000ed57fe5b6020026020010181905250620001026200036c565b60405180604001604052806040518060400160405280600781526020017f6163636f756e74000000000000000000000000000000000000000000000000008152508152602001838152509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cadb64626040518060400160405280600781526020017f745f617373657400000000000000000000000000000000000000000000000000815250836040518363ffffffff1660e01b8152600401620001e292919062000591565b602060405180830381600087803b158015620001fd57600080fd5b505af115801562000212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002389190620003e0565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359a48b656040518060400160405280600781526020017f745f6173736574000000000000000000000000000000000000000000000000008152506040518263ffffffff1660e01b8152600401620002cd91906200056d565b60206040518083038186803b158015620002e657600080fd5b505afa158015620002fb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003219190620003b4565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620006ee565b604051806040016040528060608152602001606081525090565b6000815190506200039781620006ba565b92915050565b600081519050620003ae81620006d4565b92915050565b600060208284031215620003c757600080fd5b6000620003d78482850162000386565b91505092915050565b600060208284031215620003f357600080fd5b600062000403848285016200039d565b91505092915050565b60006200041a8383620004a3565b905092915050565b60006200042f82620005dc565b6200043b8185620005ff565b9350836020820285016200044f85620005cc565b8060005b858110156200049157848403895281516200046f85826200040c565b94506200047c83620005f2565b925060208a0199505060018101905062000453565b50829750879550505050505092915050565b6000620004b082620005e7565b620004bc818562000610565b9350620004ce81856020860162000673565b620004d981620006a9565b840191505092915050565b6000620004f182620005e7565b620004fd818562000621565b93506200050f81856020860162000673565b6200051a81620006a9565b840191505092915050565b60006040830160008301518482036000860152620005448282620004a3565b9150506020830151848203602086015262000560828262000422565b9150508091505092915050565b60006020820190508181036000830152620005898184620004e4565b905092915050565b60006040820190508181036000830152620005ad8185620004e4565b90508181036020830152620005c3818462000525565b90509392505050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006200063f8262000653565b9050919050565b60008160030b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200069357808201518184015260208101905062000676565b83811115620006a3576000848401525b50505050565b6000601f19601f8301169050919050565b620006c58162000632565b8114620006d157600080fd5b50565b620006df8162000646565b8114620006eb57600080fd5b50565b6113fe80620006fe6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80635b325d7814610046578063612d2bff14610077578063b433c7ca146100a7575b600080fd5b610060600480360381019061005b9190610d79565b6100d7565b60405161006e929190611070565b60405180910390f35b610091600480360381019061008c9190610dba565b6101b3565b60405161009e9190611099565b60405180910390f35b6100c160048036038101906100bc9190610e39565b61077e565b6040516100ce91906110b4565b60405180910390f35b600080600060606000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b1b8e03866040518263ffffffff1660e01b81526004016101389190611171565b60006040518083038186803b15801561015057600080fd5b505afa158015610164573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061018d9190610cfc565b809250819350505060008090506101a38261092a565b9050828194509450505050915091565b60008060019050600080905060008090506101cd876100d7565b809350819450505060011515831515146102905784866040516101f09190611059565b6040518091039020886040516102069190611059565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60405161025d91906110ea565b60405180910390a47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9350505050610777565b610299866100d7565b8092508194505050600115158315151461035c5784866040516102bc9190611059565b6040518091039020886040516102d29190611059565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6040516103299190611105565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9350505050610777565b848210156104135784866040516103739190611059565b6040518091039020886040516103899190611059565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd6040516103e09190611120565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd9350505050610777565b8085820110156104cc57848660405161042c9190611059565b6040518091039020886040516104429190611059565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604051610499919061113b565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9350505050610777565b60606104d986840361093e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a391cb48a846040518363ffffffff1660e01b8152600401610539929190611193565b602060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058b9190610d50565b905060018160030b146106495786886040516105a79190611059565b60405180910390208a6040516105bd9190611059565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb6040516106149190611156565b60405180910390a47ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb95505050505050610777565b606061065688850161093e565b90506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a391cb48a836040518363ffffffff1660e01b81526004016106b4929190611193565b602060405180830381600087803b1580156106ce57600080fd5b505af11580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190610d50565b5087896040516107169190611059565b60405180910390208b60405161072c9190611059565b60405180910390207f105af2c562df33af7eaa9de5fb0c18d8d30f281a18f95a8f76b44353a322693c600060405161076491906110cf565b60405180910390a4600096505050505050505b9392505050565b600080600090506000600190506000809050610799866100d7565b809250819350505060011515821515146108ac5760606107b88661093e565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a391cb489846040518363ffffffff1660e01b8152600401610818929190611193565b602060405180830381600087803b15801561083257600080fd5b505af1158015610846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086a9190610d50565b905060018160030b141561088157600094506108a5565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe94505b50506108d0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff92505b84866040516108df9190611059565b60405180910390207f7ac7a04970319ae8fc5b92fe177d000fee3c00c92f8e78aae1","3d6571f17c351f8560405161091691906110b4565b60405180910390a382935050505092915050565b6000610937826000610a82565b9050919050565b60606000821415610986576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610a7d565b600082905060005b600082146109b0578080600101915050600a82816109a857fe5b04915061098e565b60608167ffffffffffffffff811180156109c957600080fd5b506040519080825280601f01601f1916602001820160405280156109fc5781602001600182028036833780820191505090505b50905060006001830390505b60008614610a7557600a8681610a1a57fe5b0660300160f81b82828060019003935081518110610a3457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681610a6d57fe5b049550610a08565b819450505050505b919050565b600060608390506000809050600080905060008090505b8351811015610bf6576030848281518110610ab057fe5b602001015160f81c60f81b60f81c60ff1610158015610aec57506039848281518110610ad857fe5b602001015160f81c60f81b60f81c60ff1611155b15610b3e578115610b0f576000861415610b0557610bf6565b8580600190039650505b600a830292506030848281518110610b2357fe5b602001015160f81c60f81b60f81c60ff160383019250610be9565b602e848281518110610b4c57fe5b602001015160f81c60f81b60f81c60ff161415610bad578115610ba4576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610b9b906111ea565b60405180910390fd5b60019150610be8565b6040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610bdf906111ca565b60405180910390fd5b5b8080600101915050610a99565b506000851115610c095784600a0a820291505b81935050505092915050565b600081519050610c2481611383565b92915050565b600081519050610c398161139a565b92915050565b600082601f830112610c5057600080fd5b8135610c63610c5e82611237565b61120a565b91508082526020830160208301858383011115610c7f57600080fd5b610c8a838284611330565b50505092915050565b600082601f830112610ca457600080fd5b8151610cb7610cb282611237565b61120a565b91508082526020830160208301858383011115610cd357600080fd5b610cde83828461133f565b50505092915050565b600081359050610cf6816113b1565b92915050565b60008060408385031215610d0f57600080fd5b6000610d1d85828601610c15565b925050602083015167ffffffffffffffff811115610d3a57600080fd5b610d4685828601610c93565b9150509250929050565b600060208284031215610d6257600080fd5b6000610d7084828501610c2a565b91505092915050565b600060208284031215610d8b57600080fd5b600082013567ffffffffffffffff811115610da557600080fd5b610db184828501610c3f565b91505092915050565b600080600060608486031215610dcf57600080fd5b600084013567ffffffffffffffff811115610de957600080fd5b610df586828701610c3f565b935050602084013567ffffffffffffffff811115610e1257600080fd5b610e1e86828701610c3f565b9250506040610e2f86828701610ce7565b9150509250925092565b60008060408385031215610e4c57600080fd5b600083013567ffffffffffffffff811115610e6657600080fd5b610e7285828601610c3f565b9250506020610e8385828601610ce7565b9150509250929050565b610e968161128a565b82525050565b610ea581611296565b82525050565b610eb4816112a3565b82525050565b610ec3816112c4565b82525050565b610ed2816112d6565b82525050565b610ee1816112e8565b82525050565b610ef0816112fa565b82525050565b610eff8161130c565b82525050565b610f0e8161131e565b82525050565b6000610f1f82611263565b610f29818561126e565b9350610f3981856020860161133f565b610f4281611372565b840191505092915050565b6000610f5882611263565b610f62818561127f565b9350610f7281856020860161133f565b80840191505092915050565b6000610f8b602c8361126e565b91507f4e6f6e2d6e756d6572616c2063686172616374657220656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b6000610ff1602c8361126e565b91507f4d6f7265207468616e206f6e6520646563696d616c20656e636f756e7465726560008301527f6420696e20737472696e672100000000000000000000000000000000000000006020830152604082019050919050565b611053816112ba565b82525050565b60006110658284610f4d565b915081905092915050565b60006040820190506110856000830185610e8d565b611092602083018461104a565b9392505050565b60006020820190506110ae6000830184610e9c565b92915050565b60006020820190506110c96000830184610eab565b92915050565b60006020820190506110e46000830184610eba565b92915050565b60006020820190506110ff6000830184610ec9565b92915050565b600060208201905061111a6000830184610ed8565b92915050565b60006020820190506111356000830184610ee7565b92915050565b60006020820190506111506000830184610ef6565b92915050565b600060208201905061116b6000830184610f05565b92915050565b6000602082019050818103600083015261118b8184610f14565b905092915050565b600060408201905081810360008301526111ad8185610f14565b905081810360208301526111c18184610f14565b90509392505050565b600060208201905081810360008301526111e381610f7e565b9050919050565b6000602082019050818103600083015261120381610fe4565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171561122d57600080fd5b8060405250919050565b600067ffffffffffffffff82111561124e57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b60008160010b9050919050565b6000819050919050565b60008160030b9050919050565b6000819050919050565b60006112cf826112a3565b9050919050565b60006112e1826112a3565b9050919050565b60006112f3826112a3565b9050919050565b6000611305826112a3565b9050919050565b6000611317826112a3565b9050919050565b6000611329826112a3565b9050919050565b82818337600083830152505050565b60005b8381101561135d578082015181840152602081019050611342565b8381111561136c576000848401525b50505050565b6000601f19601f8301169050919050565b61138c8161128a565b811461139757600080fd5b50565b6113a3816112ad565b81146113ae57600080fd5b50565b6113ba816112ba565b81146113c557600080fd5b5056fea2646970667358221220f5cccc2b0840e98544ce2c8d585e911e30eca8d7d9e1dd2caf930588c0ca126e64736f6c634300060a0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"RegisterEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"ret\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"from_account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"to_account\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferEvent\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"asset_value\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"selector\":[3934721323,3023292362],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"account\",\"type\":\"string\"}],\"name\":\"select\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[4242006977,1530027384],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"from_account\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to_account\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"int16\",\"name\":\"\",\"type\":\"int16\"}],\"selector\":[2608902224,1630350335],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_SELECT = "select";

    public static final String FUNC_TRANSFER = "transfer";

    public static final Event REGISTEREVENT_EVENT = new Event("RegisterEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event TRANSFEREVENT_EVENT = new Event("TransferEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Utf8String>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    protected Asset(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<RegisterEventEventResponse> getRegisterEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTEREVENT_EVENT, transactionReceipt);
        ArrayList<RegisterEventEventResponse> responses = new ArrayList<RegisterEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegisterEventEventResponse typedResponse = new RegisterEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.asset_value = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<TransferEventEventResponse> getTransferEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferEventEventResponse> responses = new ArrayList<TransferEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventEventResponse typedResponse = new TransferEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from_account = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to_account = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.ret = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public TransactionReceipt register(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String register(String account, BigInteger asset_value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRegister(String account, BigInteger asset_value) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Utf8String(account),
                new Uint256(asset_value)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRegisterInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRegisterOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REGISTER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<Boolean, BigInteger> select(String account) throws ContractException {
        final Function function = new Function(FUNC_SELECT, 
                Arrays.<Type>asList(new Utf8String(account)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<Boolean, BigInteger>(
                (Boolean) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public TransactionReceipt transfer(String from_account, String to_account, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String transfer(String from_account, String to_account, BigInteger amount,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransfer(String from_account, String to_account,
            BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Utf8String(from_account),
                new Utf8String(to_account),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public Tuple3<String, String, BigInteger> getTransferInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int16>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public static Asset load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Asset(contractAddress, client, credential);
    }

    public static Asset deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(Asset.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class RegisterEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] account;

        public BigInteger asset_value;

        public BigInteger ret;
    }

    public static class TransferEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] from_account;

        public byte[] to_account;

        public BigInteger amount;

        public BigInteger ret;
    }
}
